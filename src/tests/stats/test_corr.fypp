#:include "common.fypp"
#:set IR_KINDS_TYPES = INT_KINDS_TYPES + REAL_KINDS_TYPES

module test_stats_corr
    use stdlib_test, only : new_unittest, unittest_type, error_type, check
    use stdlib_stats, only: corr
    use stdlib_kinds, only : int8, int16, int32, int64, sp, dp, qp
    use,intrinsic :: ieee_arithmetic, only : ieee_is_nan
    implicit none
    private
  
    public :: collect_stats_corr

    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: ${k1}$tol = 1000 * epsilon(1._${k1}$)
    #:endfor

    #:for k1, t1 in IR_KINDS_TYPES
    ${t1}$, parameter :: d1_${k1}$(5) = [${t1}$ :: 1, 2, 3, 4, 5]
    ${t1}$, parameter :: d2_${k1}$(4, 3) =&
                                   reshape([${t1}$ :: 1, 3, 5, 22,&
                                   3, 4, 6, 20,&
                                   15, 14, 13, 12], [4, 3])
    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    complex(${k1}$), parameter :: c1_${k1}$(5) =&
                            [ cmplx(0.57706_${k1}$, 0.00000_${k1}$, kind = ${k1}$),&
                            cmplx(0.00000_${k1}$, 1.44065_${k1}$, kind = ${k1}$),&
                            cmplx(1.26401_${k1}$, 0.00000_${k1}$, kind = ${k1}$),&
                            cmplx(0.00000_${k1}$, 0.88833_${k1}$, kind = ${k1}$),&
                            cmplx(1.14352_${k1}$, 0.00000_${k1}$, kind = ${k1}$)]
    complex(${k1}$), parameter :: c2_${k1}$(2,3) &
                            = reshape([ cmplx(1._${k1}$, 0._${k1}$, kind = ${k1}$),&
                            cmplx(0._${k1}$, 2._${k1}$, kind = ${k1}$),&
                            cmplx(3._${k1}$, 0._${k1}$, kind = ${k1}$),&
                            cmplx(0._${k1}$, 4._${k1}$, kind = ${k1}$),&
                            cmplx(5._${k1}$, 0._${k1}$, kind = ${k1}$),&
                            cmplx(0._${k1}$, 6._${k1}$, kind = ${k1}$)], [2, 3])
    #:endfor

contains

    !> Collect all exported unit tests
    subroutine collect_stats_corr(testsuite)
        !> Collection of tests
        type(unittest_type), allocatable, intent(out) :: testsuite(:)

        testsuite = [ &
            new_unittest("test_${k1}$_1dim", test_${k1}$_1dim) &
            #:for k1,t1 in IR_KINDS_TYPES
            , new_unittest("test_${k1}$_1dim", test_${k1}$_1dim) &
            , new_unittest("test_${k1}$_1dim_mask_nan", test_${k1}$_1dim_mask_nan) &
            , new_unittest("test_${k1}$_1dim_mask", test_${k1}$_1dim_mask) &
            , new_unittest("test_${k1}$_2dim_dim_mask_nan", test_${k1}$_2dim_dim_mask_nan) &
            , new_unittest("test_${k1}$_2dim_dim", test_${k1}$_2dim_dim) &
            , new_unittest("test_${k1}$_2dim_dim_mask", test_${k1}$_2dim_dim_mask) &
            #:endfor
            #:for k1,t1 in CMPLX_KINDS_TYPES
            , new_unittest("test_c_${k1}$_1dim_dim",test_c_${k1}$_1dim_dim) &
            , new_unittest("test_c_${k1}$_1dim_dim_mask",test_c_${k1}$_1dim_dim_mask) &
            , new_unittest("test_c_${k1}$_1dim_dim_mask_nan",test_c_${k1}$_1dim_dim_mask_nan) &
            , new_unittest("test_c_${k1}$_2dim_dim",test_c_${k1}$_2dim_dim) &
            , new_unittest("test_c_${k1}$_2dim_dim_mask",test_c_${k1}$_2dim_dim_mask) &
            #:endfor
            ]

    end subroutine collect_stats_corr

    #:for k1, t1 in IR_KINDS_TYPES
    #:if k1[0] == 'i'
        #:set ko = 'dp'
        #:set to = 'real(dp)'
    #:else
        #:set ko = k1
        #:set to = t1
    #:endif
    subroutine test_${k1}$_1dim(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, abs(corr(d1_${k1}$, 1) - 1._${ko}$) < ${ko}$tol&
            , '${k1}$ check 1')
    end subroutine

    subroutine test_${k1}$_1dim_mask_nan(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, ieee_is_nan(corr(d1_${k1}$, 1, .false.)), '${k1}$ check 2')
        call check(error, ieee_is_nan(corr(d1_${k1}$, 1, d1_${k1}$ == 1)), '${k1}$ check 3')
        call check(error, ieee_is_nan(corr(d1_${k1}$, 1, d1_${k1}$ < -999)), '${k1}$ check 5')

    end subroutine

    subroutine test_${k1}$_1dim_mask(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, abs(corr(d1_${k1}$, 1, d1_${k1}$ < 5) - 1._${ko}$) < ${ko}$tol, '${k1}$ check 4')

    end subroutine

    subroutine test_${k1}$_2dim_dim_mask_nan(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, any(ieee_is_nan(corr(d2_${k1}$, 1, mask = .false.)))&
            , '${k1}$ check 6')
        call check(error, any(ieee_is_nan(corr(d2_${k1}$, 2, mask = .false.)))&
            , '${k1}$ check 7')
        call check(error, any(ieee_is_nan(corr(d2_${k1}$, 1, mask = d2_${k1}$ < 10)))&
            , '${k1}$ check 10')

    end subroutine

    subroutine test_${k1}$_2dim_dim(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, all( abs( corr(d2_${k1}$, 1) - reshape([&
            1._${ko}$, 0.999443910360031609085612903764355119_${ko}$,&
            -0.870544389237152567793676128589371501_${ko}$,&
            0.999443910360031609085612903764355119_${ko}$,&
            1._${ko}$, -0.862615766297429009756350554166911403_${ko}$,&
            -0.870544389237152567793676128589371501_${ko}$,&
            -0.862615766297429009756350554166911306_${ko}$, 1._${ko}$]&
            ,[ size(d2_${k1}$, 2), size(d2_${k1}$, 2)])&
            ) < ${ko}$tol)&
            , '${k1}$ check 8')
        if(allocated(error)) return

        call check(error, all( abs( corr(d2_${k1}$, 2) - reshape([&
             1._${ko}$, 0.998742137866914189429286727903477642_${ko}$,&
             0.999846989517886389758615572495770350_${ko}$,&
             -0.998337488459582677318066490725496965_${ko}$,&
             0.998742137866914189429286727903477642_${ko}$,&
             1._${ko}$, 0.999466429486246313938223164597895989_${ko}$,&
             -0.994191625601920073318918379418422629_${ko}$,&
             0.999846989517886389758615572495770254_${ko}$,&
             0.999466429486246313938223164597895893_${ko}$, 1._${ko}$,&
             -0.997176464952737990432880505612071673_${ko}$,&
             -0.998337488459582677318066490725497062_${ko}$,&
             -0.994191625601920073318918379418422629_${ko}$,&
             -0.997176464952737990432880505612071769_${ko}$, 1._${ko}$]&      
            ,[ size(d2_${k1}$, 1), size(d2_${k1}$, 1)])&
            ) < ${ko}$tol)&
            , '${k1}$ check 9')

    end subroutine

    subroutine test_${k1}$_2dim_dim_mask(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, all( abs( corr(d2_${k1}$, 1, mask = d2_${k1}$ < 22) - reshape([&
              1._${ko}$, 0.981980506061965715697438684370287590_${ko}$, -1._${ko}$,&
              0.981980506061965715697438684370287590_${ko}$, 1._${ko}$,&
              -0.862615766297429009756350554166911403_${ko}$, -1._${ko}$,&
              -0.862615766297429009756350554166911403_${ko}$, 1._${ko}$]&      
            ,[ size(d2_${k1}$, 2), size(d2_${k1}$, 2)])&
            ) < ${ko}$tol)&
            , '${k1}$ check 11')
        call check(error, all( abs( corr(d2_${k1}$, 2, mask = d2_${k1}$ < 22) - reshape([&
            1._${ko}$, 0.998742137866914189429286727903477642_${ko}$, 0.999846989517886389758615572495770158_${ko}$,&
            -1._${ko}$, 0.998742137866914189429286727903477642_${ko}$, 1._${ko}$,&
            0.999466429486246313938223164597896085_${ko}$, -1._${ko}$, 0.999846989517886389758615572495770158_${ko}$,&
            0.999466429486246313938223164597896085_${ko}$, 1._${ko}$, -1._${ko}$, -1._${ko}$, -1._${ko}$,&
            -1._${ko}$, 1._${ko}$]&       
            ,[ size(d2_${k1}$, 1), size(d2_${k1}$, 1)])&
            ) < ${ko}$tol)&
            , '${k1}$ check 12')
        call check(error, all(abs(corr(d2_${k1}$, 1, mask = d2_${k1}$ < 1000) - corr(d2_${k1}$, 1))&
            < ${ko}$tol)&
            , '${k1}$ check 13')
        call check(error, all(abs(corr(d2_${k1}$, 2, mask = d2_${k1}$ < 1000) - corr(d2_${k1}$, 2))&
            < ${ko}$tol)&
            , '${k1}$ check 14')

    end subroutine
    #:endfor

    #:for k1,t1 in CMPLX_KINDS_TYPES
    subroutine test_c_${k1}$_1dim_dim(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, abs(corr(c1_${k1}$, dim=1) - 1._${k1}$)  < ${k1}$tol&
            , 'c${k1}$ check 1')
    end subroutine

    subroutine test_c_${k1}$_1dim_dim_mask(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, abs(corr(c1_${k1}$, 1, aimag(c1_${k1}$) == 0) - 1._${k1}$ ) < ${k1}$tol&
            , 'c${k1}$ check 2')
    end subroutine

    subroutine test_c_${k1}$_1dim_dim_mask_nan(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error


        call check(error, ieee_is_nan(corr(c1_${k1}$, 1, aimag(c1_${k1}$) == -99 )) &
            , 'c${k1}$ check 3')
        call check(error, ieee_is_nan(real(corr(c1_${k1}$, 1, .false.)))&
            , 'c${k1}$ check 4')
    end subroutine

    subroutine test_c_${k1}$_2dim_dim(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        call check(error, all( abs( corr(c2_${k1}$, 1) - reshape([&
               (1._${k1}$,0._${k1}$), &
               (0.983869910099907466420036414241761561_${k1}$,-0.178885438199983175712733893498502091_${k1}$), &
               (0.973417168333575970450681120412876690_${k1}$,-0.229039333725547287164866145979500408_${k1}$), &
               (0.983869910099907466420036414241761561_${k1}$,0.178885438199983175712733893498502091_${k1}$), &
               (1._${k1}$,0._${k1}$), &
               (0.998687663476588594659210448179032683_${k1}$,-5.121475197315838946970309990661705927E-0002_${k1}$), &
               (0.973417168333575970450681120412876594_${k1}$,0.229039333725547287164866145979500408_${k1}$), &
               (0.998687663476588594659210448179032683_${k1}$,5.121475197315838946970309990661705927E-0002_${k1}$), &
               (1._${k1}$,0._${k1}$)]&
            ,[ size(c2_${k1}$, 2), size(c2_${k1}$, 2)])&
            ) < ${k1}$tol)&
            , 'c${k1}$ check 6')
        call check(error, all( abs( corr(c2_${k1}$, 2) - reshape([&
            (1._${k1}$,0._${k1}$), (0._${k1}$,1._${k1}$),&
            (0._${k1}$,-1._${k1}$), (1._${k1}$,0._${k1}$)]&
            ,[ size(c2_${k1}$, 1), size(c2_${k1}$, 1)])&
            ) < ${k1}$tol)&
            , 'c${k1}$ check 7')
    end subroutine

    subroutine test_c_${k1}$_2dim_dim_mask(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error
        call check(error, all( abs( corr(c2_${k1}$, 2, mask = aimag(c2_${k1}$) < 6) - reshape([&
             (1._${k1}$,0._${k1}$), (0._${k1}$,1._${k1}$)&
             ,(0._${k1}$,-1._${k1}$), (1._${k1}$,0._${k1}$)]&
            ,[ size(c2_${k1}$, 1), size(c2_${k1}$, 1)])&
            ) < ${k1}$tol)&
            , 'c${k1}$ check 8')
        call check(error, all( abs( corr(c2_${k1}$, 1, mask = aimag(c2_${k1}$) < 1000) - corr(c2_${k1}$, 1))&
            < ${k1}$tol)&
            , 'c${k1}$ check 9')
        call check(error, all( abs( corr(c2_${k1}$, 2, mask = aimag(c2_${k1}$) < 1000) - corr(c2_${k1}$, 2))&
            < ${k1}$tol)&
            , 'c${k1}$ check 10')
    end subroutine
    #:endfor

end module test_stats_corr

program tester
    use, intrinsic :: iso_fortran_env, only : error_unit
    use stdlib_test, only : run_testsuite, new_testsuite, testsuite_type
    use test_stats_corr, only : collect_stats_corr
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [ &
        new_testsuite("stats_corr", collect_stats_corr) &
        ]

    do is = 1, size(testsuites)
        write(error_unit, fmt) "Testing:", testsuites(is)%name
        call run_testsuite(testsuites(is)%collect, error_unit, stat)
    end do

    if (stat > 0) then
        write(error_unit, '(i0, 1x, a)') stat, "test(s) failed!"
        error stop
    end if
end program


!program test_corr
!    use stdlib_error, only: check
!    use stdlib_kinds, only: sp, dp, int32, int64
!    use stdlib_stats, only: corr
!    use,intrinsic :: ieee_arithmetic, only : ieee_is_nan
!    implicit none
!
!
!    real(sp), parameter :: sptol = 1000 * epsilon(1._sp)
!    real(dp), parameter :: dptol = 1000 * epsilon(1._dp)
!
!    real(dp) :: d1(5) = [1.0_dp, 2.0_dp, 3.0_dp, 4.0_dp, 5.0_dp]
!    real(dp) :: d(4, 3) = reshape([1._dp, 3._dp, 5._dp, 22._dp,&
!                                   3._dp, 4._dp, 6._dp, 20._dp,&
!                                   15._dp, 14._dp, 13._dp, 12._dp], [4, 3])
!
!    complex(dp) :: cd1(5) = [ cmplx(0.57706_dp, 0.00000_dp, kind = dp),&
!                            cmplx(0.00000_dp, 1.44065_dp, kind = dp),&
!                            cmplx(1.26401_dp, 0.00000_dp, kind = dp),&
!                            cmplx(0.00000_dp, 0.88833_dp, kind = dp),&
!                            cmplx(1.14352_dp, 0.00000_dp, kind = dp)]
!    complex(dp) :: ds(2,3) = reshape([ cmplx(1._dp, 0._dp, kind = dp),&
!                            cmplx(0._dp, 2._dp, kind = dp),&
!                            cmplx(3._dp, 0._dp, kind = dp),&
!                            cmplx(0._dp, 4._dp, kind = dp),&
!                            cmplx(5._dp, 0._dp, kind = dp),&
!                            cmplx(0._dp, 6._dp, kind = dp)], [2, 3])
!
!
!    call test_sp(real(d1, sp), real(d, sp))
!
!    call test_dp(d1,d)
!
!    call test_int32(int(d1, int32) ,int(d, int32))
!
!    call test_int64(int(d1, int64) ,int(d, int64))
!
!    call test_csp(cmplx(cd1, kind = sp), cmplx(ds, kind = sp))
!
!    call test_cdp(cd1, ds)
!
!contains
!
!    subroutine test_sp(x, x2)
!        real(sp), intent(in) :: x(:)
!        real(sp), intent(in) :: x2(:, :)
!
!        call check( abs(corr(x, 1) - 1._sp) < sptol&
!            , 'sp check 1')
!        call check( ieee_is_nan(corr(x, 1, .false.))&
!            , 'sp check 2')
!        call check( ieee_is_nan(corr(x, 1, x == 1.)), 'sp check 3')
!        call check( abs(corr(x, 1, x < 5) - 1._sp) < sptol, 'sp check 4')
!        call check( ieee_is_nan(corr(x, 1, x < -999)), 'sp check 5')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = .false.)))&
!            , 'sp check 6')
!        call check( any(ieee_is_nan(corr(x2, 2, mask = .false.)))&
!            , 'sp check 7')
!
!        call check( all( abs( corr(x2, 1) - reshape([&
!            1._sp, 0.9994439103600_sp, -0.870544389237152_sp, 0.99944391036_sp,&
!            1._sp, -0.86261576629742_sp, -0.87054438923715_sp,  -0.862615766297428_sp,&
!            1._sp ]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < sptol)&
!            , 'sp check 8')
!        call check( all( abs( corr(x2, 2) - reshape([&
!             1._sp, 0.998742137866914_sp,  0.999846989517886_sp, -0.998337488459582_sp,&
!             0.998742137866914_sp, 1._sp, 0.999466429486246_sp, -0.99419162560192020_sp,&
!             0.999846989517886_sp, 0.999466429486246_sp, 1._sp, -0.99717646495273815_sp,&
!             -0.998337488459582_sp, -0.994191625601920_sp, -0.997176464952738_sp, 1._sp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < sptol)&
!            , 'sp check 9')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = x2 < 10)))&
!            , 'sp check 10')
!        call check( all( abs( corr(x2, 1, mask = x2 < 22) - reshape([&
!              1._sp, 0.981980506061965_sp, -1._sp&
!              ,0.981980506061965_sp, 1._sp, -0.862615766297428_sp&
!              ,-1._sp, -0.862615766297428_sp, 1._sp]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < sptol)&
!            , 'sp check 11')
!        call check( all( abs( corr(x2, 2, mask = x2 < 22) - reshape([&
!            1._sp, 0.998742137866914_sp, 0.999846989517886_sp, -1._sp&
!            ,0.998742137866914_sp, 1._sp, 0.999466429486246_sp, -1._sp&
!            ,0.999846989517886_sp, 0.999466429486246_sp, 1._sp, -1._sp&
!            ,-1._sp, -1._sp, -1._sp, 1._sp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < sptol)&
!            , 'sp check 12')
!
!
!        call check( all(abs(corr(x2, 1, mask = x2 < 1000) - corr(x2, 1))&
!            < sptol)&
!            , 'sp check 13')
!
!        call check( all(abs(corr(x2, 2, mask = x2 < 1000) - corr(x2, 2))&
!            < sptol)&
!            , 'sp check 14')
!
!    end subroutine test_sp
!
!    subroutine test_dp(x, x2)
!        real(dp), intent(in) :: x(:)
!        real(dp), intent(in) :: x2(:, :)
!
!        call check( abs(corr(x, 1) - 1._dp) < dptol&
!            , 'dp check 1')
!        call check( ieee_is_nan(corr(x, 1, .false.))&
!            , 'dp check 2')
!        call check( ieee_is_nan(corr(x, 1, x == 1.)), 'dp check 3')
!        call check( abs(corr(x, 1, x < 5) - 1._dp) < dptol, 'dp check 4')
!        call check( ieee_is_nan(corr(x, 1, x < -999)), 'dp check 5')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = .false.)))&
!            , 'dp check 6')
!        call check( any(ieee_is_nan(corr(x2, 2, mask = .false.)))&
!            , 'dp check 7')
!
!        call check( all( abs( corr(x2, 1) - reshape([&
!            1._dp, 0.9994439103600_dp, -0.870544389237152_dp, 0.99944391036_dp,&
!            1._dp, -0.86261576629742_dp, -0.87054438923715_dp,  -0.862615766297428_dp,&
!            1._dp ]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'dp check 8')
!        call check( all( abs( corr(x2, 2) - reshape([&
!             1._dp, 0.998742137866914_dp,  0.999846989517886_dp, -0.998337488459582_dp,&
!             0.998742137866914_dp, 1._dp, 0.999466429486246_dp, -0.99419162560192020_dp,&
!             0.999846989517886_dp, 0.999466429486246_dp, 1._dp, -0.99717646495273815_dp,&
!             -0.998337488459582_dp, -0.994191625601920_dp, -0.997176464952738_dp, 1._dp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'dp check 9')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = x2 < 10)))&
!            , 'dp check 10')
!        call check( all( abs( corr(x2, 1, mask = x2 < 22) - reshape([&
!              1._dp, 0.981980506061965_dp, -1._dp&
!              ,0.981980506061965_dp, 1._dp, -0.862615766297428_dp&
!              ,-1._dp, -0.862615766297428_dp, 1._dp]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'dp check 11')
!        call check( all( abs( corr(x2, 2, mask = x2 < 22) - reshape([&
!            1._dp, 0.998742137866914_dp, 0.999846989517886_dp, -1._dp&
!            ,0.998742137866914_dp, 1._dp, 0.999466429486246_dp, -1._dp&
!            ,0.999846989517886_dp, 0.999466429486246_dp, 1._dp, -1._dp&
!            ,-1._dp, -1._dp, -1._dp, 1._dp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'dp check 12')
!
!        call check( all(abs(corr(x2, 1, mask = x2 < 1000) - corr(x2, 1))&
!            < dptol)&
!            , 'dp check 13')
!
!        call check( all(abs(corr(x2, 2, mask = x2 < 1000) - corr(x2, 2))&
!            < dptol)&
!            , 'dp check 14')
!
!    end subroutine test_dp
!
!    subroutine test_int32(x, x2)
!        integer(int32), intent(in) :: x(:)
!        integer(int32), intent(in) :: x2(:, :)
!
!        call check( abs(corr(x, 1) - 1._dp) < dptol&
!            , 'int32 check 1')
!        call check( ieee_is_nan(corr(x, 1, .false.))&
!            , 'int32 check 2')
!        call check( ieee_is_nan(corr(x, 1, x == 1.)), 'int32 check 3')
!        call check( abs(corr(x, 1, x < 5) - 1._dp) < dptol, 'int32 check 4')
!        call check( ieee_is_nan(corr(x, 1, x < -999)), 'int32 check 5')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = .false.)))&
!            , 'int32 check 6')
!        call check( any(ieee_is_nan(corr(x2, 2, mask = .false.)))&
!            , 'int32 check 7')
!
!        call check( all( abs( corr(x2, 1) - reshape([&
!            1._dp, 0.9994439103600_dp, -0.870544389237152_dp, 0.99944391036_dp,&
!            1._dp, -0.86261576629742_dp, -0.87054438923715_dp,  -0.862615766297428_dp,&
!            1._dp ]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'int32 check 8')
!        call check( all( abs( corr(x2, 2) - reshape([&
!             1._dp, 0.998742137866914_dp,  0.999846989517886_dp, -0.998337488459582_dp,&
!             0.998742137866914_dp, 1._dp, 0.999466429486246_dp, -0.99419162560192020_dp,&
!             0.999846989517886_dp, 0.999466429486246_dp, 1._dp, -0.99717646495273815_dp,&
!             -0.998337488459582_dp, -0.994191625601920_dp, -0.997176464952738_dp, 1._dp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'int32 check 9')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = x2 < 10)))&
!            , 'int32 check 10')
!        call check( all( abs( corr(x2, 1, mask = x2 < 22) - reshape([&
!              1._dp, 0.981980506061965_dp, -1._dp&
!              ,0.981980506061965_dp, 1._dp, -0.862615766297428_dp&
!              ,-1._dp, -0.862615766297428_dp, 1._dp]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'int32 check 11')
!        call check( all( abs( corr(x2, 2, mask = x2 < 22) - reshape([&
!            1._dp, 0.998742137866914_dp, 0.999846989517886_dp, -1._dp&
!            ,0.998742137866914_dp, 1._dp, 0.999466429486246_dp, -1._dp&
!            ,0.999846989517886_dp, 0.999466429486246_dp, 1._dp, -1._dp&
!            ,-1._dp, -1._dp, -1._dp, 1._dp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'int32 check 12')
!
!        call check( all(abs(corr(x2, 1, mask = x2 < 1000) - corr(x2, 1))&
!            < dptol)&
!            , 'int32 check 13')
!
!        call check( all(abs(corr(x2, 2, mask = x2 < 1000) - corr(x2, 2))&
!            < dptol)&
!            , 'int32 check 14')
!
!    end subroutine test_int32
!
!    subroutine test_int64(x, x2)
!        integer(int64), intent(in) :: x(:)
!        integer(int64), intent(in) :: x2(:, :)
!
!        call check( abs(corr(x, 1) - 1._dp) < dptol&
!            , 'int64 check 1')
!        call check( ieee_is_nan(corr(x, 1, .false.))&
!            , 'int64 check 2')
!        call check( ieee_is_nan(corr(x, 1, x == 1)), 'int64 check 3')
!        call check( abs(corr(x, 1, x < 5) - 1._dp) < dptol, 'int64 check 4')
!        call check( ieee_is_nan(corr(x, 1, x < -999)), 'int64 check 5')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = .false.)))&
!            , 'int64 check 6')
!        call check( any(ieee_is_nan(corr(x2, 2, mask = .false.)))&
!            , 'int64 check 7')
!
!        call check( all( abs( corr(x2, 1) - reshape([&
!            1._dp, 0.9994439103600_dp, -0.870544389237152_dp, 0.99944391036_dp,&
!            1._dp, -0.86261576629742_dp, -0.87054438923715_dp,  -0.862615766297428_dp,&
!            1._dp ]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'int64 check 8')
!        call check( all( abs( corr(x2, 2) - reshape([&
!             1._dp, 0.998742137866914_dp,  0.999846989517886_dp, -0.998337488459582_dp,&
!             0.998742137866914_dp, 1._dp, 0.999466429486246_dp, -0.99419162560192020_dp,&
!             0.999846989517886_dp, 0.999466429486246_dp, 1._dp, -0.99717646495273815_dp,&
!             -0.998337488459582_dp, -0.994191625601920_dp, -0.997176464952738_dp, 1._dp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'int64 check 9')
!
!        call check( any(ieee_is_nan(corr(x2, 1, mask = x2 < 10)))&
!            , 'int64 check 10')
!        call check( all( abs( corr(x2, 1, mask = x2 < 22) - reshape([&
!              1._dp, 0.981980506061965_dp, -1._dp&
!              ,0.981980506061965_dp, 1._dp, -0.862615766297428_dp&
!              ,-1._dp, -0.862615766297428_dp, 1._dp]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'int64 check 11')
!        call check( all( abs( corr(x2, 2, mask = x2 < 22) - reshape([&
!            1._dp, 0.998742137866914_dp, 0.999846989517886_dp, -1._dp&
!            ,0.998742137866914_dp, 1._dp, 0.999466429486246_dp, -1._dp&
!            ,0.999846989517886_dp, 0.999466429486246_dp, 1._dp, -1._dp&
!            ,-1._dp, -1._dp, -1._dp, 1._dp]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'int64 check 12')
!
!        call check( all(abs(corr(x2, 1, mask = x2 < 1000) - corr(x2, 1))&
!            < dptol)&
!            , 'int64 check 13')
!
!        call check( all(abs(corr(x2, 2, mask = x2 < 1000) - corr(x2, 2))&
!            < dptol)&
!            , 'int64 check 14')
!
!    end subroutine test_int64
!
!    subroutine test_csp(x, x2)
!        complex(sp), intent(in) :: x(:)
!        complex(sp), intent(in) :: x2(:, :)
!
!        call check( abs(corr(x, dim=1) - 1._sp)  < sptol&
!            , 'csp check 1')
!        call check( abs(corr(x, 1, aimag(x) == 0) - 1._sp ) < sptol&
!            , 'csp check 2')
!
!        call check( ieee_is_nan(corr(x, 1, aimag(x) == -99 )) &
!            , 'csp check 3')
!
!        call check( ieee_is_nan(real(corr(x, 1, .false.)))&
!            , 'csp check 4')
!
!        call check( all( abs( corr(x2, 1) - reshape([&
!               (1._sp,0._sp), (0.983869910099907_sp,-0.178885438199983_sp),&
!               (0.973417168333576_sp,-0.229039333725547_sp),&
!               (0.983869910099907_sp,0.178885438199983_sp), (1._sp,0._sp),&
!               (0.998687663476588_sp,-0.051214751973158_sp),&
!               (0.973417168333575_sp,0.229039333725547_sp),&
!               (0.998687663476588_sp,0.0512147519731583_sp), (1._sp,0._sp) ]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < sptol)&
!            , 'csp check 6')
!        call check( all( abs( corr(x2, 2) - reshape([&
!            (1._sp,0._sp), (0._sp,1._sp),&
!            (0._sp,-1._sp), (1._sp,0._sp)]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < sptol)&
!            , 'csp check 7')
!
!        call check( all( abs( corr(x2, 2, mask = aimag(x2) < 6) - reshape([&
!             (1._sp,0._sp), (0._sp,1._sp)&
!             ,(0._sp,-1._sp), (1._sp,0._sp)]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < sptol)&
!            , 'csp check 8')
!
!        call check( all(abs(corr(x2, 1, mask = aimag(x2) < 1000) - corr(x2, 1))&
!            < sptol)&
!            , 'csp check 9')
!
!        call check( all(abs(corr(x2, 2, mask = aimag(x2) < 1000) - corr(x2, 2))&
!            < sptol)&
!            , 'csp check 10')
!
!    end subroutine test_csp
!
!    subroutine test_cdp(x, x2)
!        complex(dp), intent(in) :: x(:)
!        complex(dp), intent(in) :: x2(:, :)
!
!        call check( abs(corr(x, dim=1) - 1._dp)  < dptol&
!            , 'cdp check 1')
!        call check( abs(corr(x, 1, aimag(x) == 0) - 1._dp ) < dptol&
!            , 'cdp check 2')
!
!        call check( ieee_is_nan(corr(x, 1, aimag(x) == -99 )) &
!            , 'cdp check 3')
!
!        call check( ieee_is_nan(real(corr(x, 1, .false.)))&
!            , 'cdp check 4')
!
!        call check( all( abs( corr(x2, 1) - reshape([&
!               (1._dp,0._dp), (0.983869910099907_dp,-0.178885438199983_dp),&
!               (0.973417168333576_dp,-0.229039333725547_dp),&
!               (0.983869910099907_dp,0.178885438199983_dp), (1._dp,0._dp),&
!               (0.998687663476588_dp,-0.051214751973158_dp),&
!               (0.973417168333575_dp,0.229039333725547_dp),&
!               (0.998687663476588_dp,0.0512147519731583_dp), (1._dp,0._dp) ]&
!            ,[ size(x2, 2), size(x2, 2)])&
!            ) < dptol)&
!            , 'cdp check 6')
!        call check( all( abs( corr(x2, 2) - reshape([&
!            (1._dp,0._dp), (0._dp,1._dp),&
!            (0._dp,-1._dp), (1._dp,0._dp)]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'cdp check 7')
!
!        call check( all( abs( corr(x2, 2, mask = aimag(x2) < 6) - reshape([&
!             (1._dp,0._dp), (0._dp,1._dp)&
!             ,(0._dp,-1._dp), (1._dp,0._dp)]&
!            ,[ size(x2, 1), size(x2, 1)])&
!            ) < dptol)&
!            , 'cdp check 8')
!
!        call check( all(abs(corr(x2, 1, mask = aimag(x2) < 1000) - corr(x2, 1))&
!            < sptol)&
!            , 'csp check 9')
!
!        call check( all(abs(corr(x2, 2, mask = aimag(x2) < 1000) - corr(x2, 2))&
!            < sptol)&
!            , 'csp check 10')
!
!    end subroutine test_cdp
!
!!!end program test_corr
